% %Software to make an LED on the Arduino board blink
%{
Creating a MatLab Arduino control GUI, following now Nick did it.
Uses the figure options instead of uifigure.

Version 2d introduces an interrupt in the form of a Hi/Lo voltage on a
specific pin.
%}

function arduinoBlink
%% Initializing the Arduino object
% Close all possible open connections
fclose('all');
close all;
clear all;
clc;

% Create the Arduino object
clear a;
%channel=inputdlg('Arduino Port (i.e. COM4)','Port',1,{'COM4'});
a=arduino('COM7','Uno','Libraries','PaulStoffregen/OneWire');

%% Creating Window and Title
f=figure('Visible','off',...
    'Position', [010 010 600 400],...
    'Name','Arduino Blinking Control',...
    'NumberTitle','off',...
    'MenuBar','none');

htitle=uicontrol('Style','Text',...
    'String','Arduino Blnking Control',...
    'FontUnits','normalized', ...
    'FontWeight','Bold',...
    'BackgroundColor',[0.7 0.7 0.7],...
    'ForegroundColor','k',...
    'Position',[200, 370, 200, 030]);

%% Creating buttons and input dialogs
%Red LED Panel
hPanelRed = uipanel('Title', 'Red LED', ...
    'BackgroundColor', 'white', ...
    'Position',[.05 .05 .40 .80]);

hRedLock = uipanel ('Title', 'Lock Status', ...
    'Parent', hPanelRed, ...
    'BackgroundColor', 'blue', ...
    'Position', [.05 .75 .35 .15]);

hRedLEDbinary = uicontrol('Style','togglebutton',...
    'Parent', hPanelRed, ...
    'String', 'LED On/Off',...
    'FontUnits','normalized',...
    'Position',[010 180 150 025],...
    'Callback',{@callbackRedLEDbinary});

hRedBlink = uicontrol('Style','togglebutton',...
    'Parent', hPanelRed, ...
    'String', 'Start/Stop Blinking',...
    'FontUnits','normalized',...
    'Position',[010 110 150 025],...
    'Callback',{@callbackRedBlink});

hRedWaitText = uicontrol ('Style', 'text',...
    'Parent', hPanelRed, ...
    'String', 'Input Blinking Speed',...
    'FontUnits','normalized',...
    'Position',[010 070 150 025]);

hRedWaitTime = uicontrol ('Style', 'slider', ...
    'Parent', hPanelRed, ...
    'FontUnits','normalized',...
    'Position',[010 050 150 025]);
hRedWaitTime.Value = 0.5;

hRedExit = uicontrol('Style','pushbutton',...
    'Parent', hPanelRed, ...
    'String','Exit',...
    'FontUnits','normalized',...
    'Position',[010 010 150 025],...
    'Callback',{@callbackExit});

%%Green LED Panel
%{
hPanelGreen = uipanel('Title', 'Green LED', ...
    'BackgroundColor', 'white', ...
    'Position',[.50 .05 .40 .80]);

hGreenLED = uipanel ('Title', 'Lamp Status', ...
    'Parent', hPanelGreen, ...
    'BackgroundColor', 'blue', ...
    'Position', [.05 .75 .35 .15]);

hGreenLEDbinary = uicontrol('Style','togglebutton',...
    'Parent', hPanelGreen, ...
    'String', 'LED On/Off',...
    'FontUnits','normalized',...
    'Position',[010 180 150 025],...
    'Callback',{@callbackGreenLEDbinary});

hGreenBlink = uicontrol('Style','togglebutton',...
    'Parent', hPanelGreen, ...
    'String', 'Start/Stop Blinking',...
    'FontUnits','normalized',...
    'Position',[010 110 150 025],...
    'Callback',{@callbackGreenBlink});

hGreenWaitText = uicontrol ('Style', 'text',...
    'Parent', hPanelGreen, ...
    'String', 'Input Blinking Speed',...
    'FontUnits','normalized',...
    'Position',[010 070 150 025]);

hGreenWaitTime = uicontrol ('Style', 'slider', ...
    'Parent', hPanelGreen, ...
    'FontUnits','normalized',...
    'Position',[010 050 150 025]);
hGreenWaitTime.Value = 0.5;

hGreenExit = uicontrol('Style','pushbutton',...
    'Parent', hPanelGreen, ...
    'String','Exit',...
    'FontUnits','normalized',...
    'Position',[010 010 150 025],...
    'Callback',{@callbackExit});
%}


%% Functions defining what the buttons do
% Exit the GUI
    function callbackExit (source, eventdata)
        fclose('all');
        close all;
        clear all;
    end

% Binary LED control
    function callbackRedLEDbinary (source, eventdata)
        if hRedLEDbinary.Value == 0
            fprintf ('button LED value %f \n', hRedLEDbinary.Value);
            writeDigitalPin (a, 'D09', 0);
        end
        if hRedLEDbinary.Value == 1
            fprintf ('button LED value %f \n', hRedLEDbinary.Value);
            writeDigitalPin (a, 'D09', 1);
        end
    end
%{
    function callbackGreenLEDbinary (source, eventdata)
        if hGreenLEDbinary.Value == 0
            fprintf ('button LED value %f \n', hGreenLEDbinary.Value);
            writeDigitalPin (a, 'D07', 0);
        end
        if hGreenLEDbinary.Value == 1
            fprintf ('button LED value %f \n', hGreenLEDbinary.Value);
            writeDigitalPin (a, 'D07', 1);
        end
    end
%}

% Blinking control
    function callbackRedBlink (source, eventdata)
        hRedLEDbinary.Value = 1;
        while get (hRedBlink, 'Value') == 1 
            if get (hRedBlink, 'Value') == 0
                break;
            end
            if get (hRedLEDbinary, 'Value') == 0
                break;
            end
            writeDigitalPin (a, 'D09', 1);
            pause (hRedWaitTime.Value);
            writeDigitalPin (a, 'D09', 0);
            pause (hRedWaitTime.Value);
        end
    end

%{
    function callbackGreenBlink (source, eventdata)
        hGreenLEDbinary.Value = 1;
        while get (hGreenBlink, 'Value') == 1 
            if get (hGreenBlink, 'Value') == 0
                break;
            end
            if get (hGreenLEDbinary, 'Value') == 0
                break;
            end
            writeDigitalPin (a, 'D07', 1);
            pause (hGreenWaitTime.Value);
            writeDigitalPin (a, 'D07', 0);
            pause (hGreenWaitTime.Value);
        end
    end
%}


%% Actually executing the program
% Show Window
movegui(f,'center')
f.Visible='on';
end